// NOTE: the config is in HOCON format [1][2][3].
//       [1] https://en.wikipedia.org/wiki/HOCON
//       [2] https://www.playframework.com/documentation/2.5.x/ConfigFile
//       [3] https://github.com/typesafehub/config/blob/master/HOCON.md
//       By convention property names are lowercase.
//       By convention env. variable name are uppercase.

com.microsoft.azure.iotsolutions {
  uiconfig {
    storageadapter-webservice-url: ${PCS_STORAGEADAPTER_WEBSERVICE_URL}
    cache_TTL: ${cache.TTL}
    rebuild_timeout: ${cache.rebuild-timeout}
    devicesimulation-webservice-url: ${PCS_DEVICESIMULATION_WEBSERVICE_URL}
    iothubmanager-webservice-url: ${PCS_IOTHUBMANAGER_WEBSERVICE_URL}
    telemetry-webservice-url: ${PCS_TELEMETRY_WEBSERVICE_URL}
    seed-template: "default"
    bingmap-key = ${PCS_BINGMAP_KEY}

    client-auth {
      // Current auth type, only "JWT" is currently supported
      auth_type = "JWT"
      // This can be changed to false, for example during development,
      // to allow invalid/missing authorizations.
      // Default: true
      auth_required = ${?PCS_AUTH_REQUIRED}
      // ${?PCS_CORS_WHITELIST} not supported, see play.filters.cors and play.filters.hosts below

      JWT {
        // Trusted algorithms
        // Default: "RS256,RS384,RS512"
        allowed_algorithms = "RS256"
        // Identifies the security token service (STS) that constructs and returns the token.
        // In the tokens that Azure AD returns, the issuer is sts.windows.net. The GUID in
        // the Issuer claim value is the tenant ID of the Azure AD directory. The tenant ID
        // is an immutable and reliable identifier of the directory.
        // Used to verify that tokens are issued by Azure AD.
        // When using Azure Active Directory, the format of the Issuer is:
        // https://sts.windows.net/<tenant Id>/
        // example: issuer="https://sts.windows.net/fa01ade2-2365-4dd1-a084-a6ef027090fc/"
        issuer = ${?PCS_AUTH_ISSUER}
        // Used to verify that tokens are issued to be given to this service
        // Also referenced as "Application Id" and "Resource Id"
        // example: audience="2814e709-6a0e-4861-9594-d3b6e2b81331"
        audience = ${?PCS_AUTH_AUDIENCE}
        // When validating the token expiration, allows some clock skew
        // Default: 2 minutes
        clock_skew_seconds = 300
      }
    }
  }
}

http {
  port: 9005
}

// TODO: this should be inside the service configuration
cache {
  TTL: 3600
  rebuild-timeout: 20
}

// Play uses a secret key for a number of things, including:
// * Signing session cookies and CSRF tokens
// * Built in encryption utilities
// Azure IoT Solutions don't require this setting, however you should
//   set a value if you plan to use Play crypto libraries.
// * see https://www.playframework.com/documentation/2.6.x/ApplicationSecret
// * see https://www.playframework.com/documentation/2.6.x/CryptoMigration25
// Note: "play.crypto.secret" has been deprecated
play.http.secret.key = "changeme"
play.http.secret.key = ${?PCS_APPLICATION_SECRET}

// Errors handler
play.http.errorHandler = "com.microsoft.azure.iotsolutions.uiconfig.webservice.filters.ErrorHandler"

// Restrict web service to authorized clients
play.filters.enabled += com.microsoft.azure.iotsolutions.uiconfig.webservice.auth.AuthorizationFilter

// Disable CSRF protection for AJAX requests containing the Csrf-Token header
// see https://www.playframework.com/documentation/2.6.x/JavaCsrf
play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}

// See https://www.playframework.com/documentation/2.6.x/CorsFilter
// Play provides a filter that implements Cross-Origin Resource Sharing (CORS).
// Allows web applications to make requests from the browser across different domains
// play.filters.enabled += play.filters.cors.CORSFilter
//play.filters.cors {
//  pathPrefixes = ["/some/path", ...]
//  allowedOrigins = ["https://www.contoso.com", ...]
//  allowedHttpMethods = ["GET", "POST", "PATCH", "PUT", "DELETE"]
//  allowedHttpHeaders = ["Accept"]
//  preflightMaxAge = 3 days
//}

// See https://www.playframework.com/documentation/2.6.x/AllowedHostsFilter
// Play provides a filter that lets you configure which hosts can access your application.
// You can use the "." pattern to match all hosts (not recommended in production)
//play.filters.hosts {
//  // Allow requests to example.com, its subdomains, and localhost:9000.
//  allowed = [".contoso.com", "localhost:9000"]
//}
play.filters.disabled += play.filters.hosts.AllowedHostsFilter

akka {
  // Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel: INFO
}
